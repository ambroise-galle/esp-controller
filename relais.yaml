# Nom de l'esp
substitutions:
  name: esphome-web-7d45ac
  friendly_name: Relay

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev

esp32:
  board: esp32dev
  framework:
    type: arduino

# Accès wifi 192.168.1.122
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap: {}

# Enable logging
logger:

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
- platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp32.yaml@main
  import_full_config: true

# Sets up Bluetooth LE (Only on ESP32) to allow the user
# to provision wifi credentials to the device.
esp32_improv:
  authorizer: none

# To have a "next url" for improv serial
web_server:

# Variable pour remettre a zero l'intensité
globals:
  - id: offset_intensite
    type: float
    restore_value: True
    initial_value: "0.0"

# Definis les 3 switchs 
switch:
  - platform: gpio
    name: "Relay 1"
    id: relay_1
    pin: 18
    restore_mode: ALWAYS_ON
  - platform: gpio
    name: "Relay 2"
    id: relay_2
    pin: 19
  - platform: gpio
    name: "Relay 3"
    id: relay_3
    pin: 21

# Bouton pour remettre a zero l'intensité, ici GPIO0 = boot
binary_sensor:
  - platform: gpio
    pin: GPIO0
    name: "Reset zero"
    on_press: 
      then:
        - script.execute: reset_intensite
  
# Créer un bus i²c pour le convertiseur CAN et l'écran
i2c:
  - id: bus_a     # Bus du CAN
    sda: GPIO22
    scl: GPIO23
    scan: true
  - id: bus_b     # Bus de l'écran
    sda: GPIO16
    scl: GPIO17
    scan: true

# Écran
display:
  - platform: lcd_pcf8574
    i2c_id: bus_b
    dimensions: 20x4
    address: 0x27
    update_interval: 0.1s  # Taux de rafraichisement
    lambda: |-
      it.printf(0,0,"Intensite : %.1f " , id(intensite).state );
      it.printf(17,1,"|||");
      it.printf(0,2,"Tension : %.1f" , id(tension).state );
      it.printf(17,3,"|||");
      if (id(relay_1).state == true) {it.printf(17,2,"|");}
      else {it.print(17,2,"/");};
      if (id(relay_2).state == true) {it.printf(18,2,"|");}
      else {it.print(18,2,"/");};
      if (id(relay_3).state == true) {it.printf(19,2,"|");}
      else {it.print(19,2,"/");};

# Defini le CAN
ads1115:
  - address: 0x48
    i2c_id: bus_a

# Mesure de la tention et de l'intensité
sensor:
  - platform: ads1115             # Intensité
    id : intensite
    multiplexer: A0_GND
    gain: 6.144                   # Gain par deefault
    name: "Intensité"
    unit_of_measurement: A
    update_interval: 0.1s
    filters: 
      - lambda: 
          return (x-1.63)/0.025 - id(offset_intensite);  #(x-vcc/2)/0.025 - offset

  - platform: ads1115             # Tension
    id : tension
    multiplexer: A2_A3            # Bornes de la resistant 2,2k Ω
    gain: 6.144
    name: "Tension"
    unit_of_measurement: V
    update_interval: 0.1s
    filters: 
      - lambda: 
          return x*(71/2.2);      # x*(R1+R2)/R1 normalement x*(70.2/2.2) mais ici ajuster
    on_value_range:               # Quand la tension dépasse 11.0V le script ajoute_resistante s'execute, Quand la tension diminue sous 4.0V le script enleve_resistance s'execute
      - above: 11.0
        then: 
          - script.execute: ajoute_resistance
      - below: 4.0
        then: 
          - script.execute : enleve_resistance

# Scripts pour controller les resistances
script:
  - id: ajoute_resistance               # Ajout d'une resistance: si la 2 est activé alors on ajoute la 3 sinon la 2
    then: 
      if:
        condition:
          - switch.is_on: relay_2       # Observe l'état du relay
        then:
          - switch.turn_on: relay_3     # Active le relay
        else:
          - switch.turn_on: relay_2

  - id: enleve_resistance               # Retrait d'une resistance: si la 3 est activé alors on enleve la 3 sinon la 2
    then: 
      if:
        condition:
          - switch.is_on: relay_3
        then:
          - switch.turn_off: relay_3    # Eteint le relay
        else:
          - switch.turn_off: relay_2

  - id: reset_intensite                 # Change la valeur d'offset
    then:
      - globals.set:
          id: offset_intensite
          value: !lambda |-
            if (isnan(id(intensite).state)) {return (float) 0.00;} 
            else {return (float) (id(intensite).state + id(offset_intensite));}

          