esphome:
  name: debit
  friendly_name: Debit

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "eg92F4bEUKb6zRwUlHEbbvmFJUNLRSYuh9w/WpDEibQ="


ota:
  - platform: esphome
    password: "6d3406a458b8a9cd3a4f9cb2e9ddcae0"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.1.107
    gateway: 192.168.1.1
    subnet: 255.255.255.0
  fast_connect: true
  output_power: 20.4 dB
  power_save_mode: none

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Debit Fallback Hotspot"
    password: "tAtcEokEYBZw"

captive_portal:
    
one_wire:
  - platform: gpio
    pin: GPIO23

sensor:
  - platform: dallas_temp
    name: temperature
    update_interval: 2s
    
  - platform: pulse_meter
    name: 'Consommation eau'
    id: sensor_pulse_meter_eau # Optional ID, necessary if you want to calculate the total number of pulses.
    unit_of_measurement: 'L/min'
    accuracy_decimals: 1
    pin: GPIO13
    timeout: 10s
    filters:
      - lambda: return x/600 ;
    total:
      name: "Consommation eau total"
      id: sensor_pulse_meter_consomation_eau
      unit_of_measurement: 'L'
      accuracy_decimals: 2
      filters:
        - lambda: return x/600 ;
      
time:
  - platform: homeassistant
    id: homeassistant_time

# Bouton pour remettre à zéro la consommation
button:
  - platform: template
    name: "Reset consommation Eau"
    on_press:
      then:
        - script.execute: reset_consomation_eau_script

# Script pour réinitialiser la consommation d'eau et mettre à jour l'heure de réinitialisation
script:
  - id: reset_consomation_eau_script
    then:
      - lambda: id(sensor_pulse_meter_consomation_eau).publish_state(0);
      - homeassistant.service:
          service: input_text.set_value
          data:
            entity_id: input_text.last_reset_time
            value: !lambda |-
              char buffer[32];
              std::time_t now;
              std::time(&now);
              std::strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S", std::localtime(&now));
              return std::string(buffer);